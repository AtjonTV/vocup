; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


#include "it_download.iss"

[Setup]
AppName=Vocup
AppVerName=Vocup 1.4.3
AppVersion=1.4.3
AppPublisher=Florian Amstutz
DefaultDirName={pf}\Vocup
DefaultGroupName=Vocup
OutputDir=Setup
OutputBaseFilename=Vocup_1.4.3
SetupIconFile=setup_icon.ico

Compression=lzma
SolidCompression=true
ShowLanguageDialog=no
AppMutex=Vocup
MinVersion=4.1.1998,5.0.2195sp3
DirExistsWarning=no
ChangesAssociations=yes
RestartIfNeededByRun=Yes

WizardImageFile=left.bmp
WizardSmallImageFile=top.bmp

LicenseFile=license.rtf

VersionInfoVersion =1.4.3
VersionInfoCompany = Florian Amstutz
VersionInfoCopyright = © 2009 by Florian Amstutz

[Languages]
Name: german; MessagesFile: compiler:Languages\German.isl

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Check: check_dont_install

[Files]

Source: Vocup.exe;                    DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: K_Updater.dll;                DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: ICSharpCode.SharpZipLib.dll;  DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: sound_correct.wav;            DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: sound_wrong.wav;              DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: icon_vhf.ico;                 DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: icon_vdp.ico;                 DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install
Source: Hilfe.chm;                    DestDir: {app}; Flags: ignoreversion replacesameversion ; Check:  check_dont_install


[Icons]
Name: {group}\Vocup;                       Filename: {app}\Vocup.exe                              ; Check:  check_dont_install
Name: {group}\{cm:UninstallProgram,Vocup}; Filename: {uninstallexe}                               ; Check:  check_dont_install
Name: {commondesktop}\Vocup;               Filename: {app}\Vocup.exe; Tasks: desktopicon          ; Check:  check_dont_install

[Registry]

;Mit dieser Anweisung wird ein Registryschlüssel namens ".vhf" erzeugt
Root: HKCR; Subkey: ".vhf"; ValueType: string; ValueName: ""; ValueData: "vhf.File"; Flags: uninsdeletekey     deletevalue                                                           ;Check: check_dont_install
;TYpenSchlüssel erstellen
Root: HKCR; Subkey: "vhf.File"; ValueType: string; ValueName: ""; ValueData: "Vokabelheft"   ; Flags: uninsdeletekey    deletevalue                                                  ;Check: check_dont_install
;Icon Zuordnen
Root: HKCR; Subkey: "vhf.File\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\icon_vhf.ico"  ; Flags: uninsdeletekey   deletevalue                                     ;Check: check_dont_install
;Aktion beim Klicken festlegen
Root: HKCR; Subkey: "vhf.File\shell\open\command"; ValueType: string; ValueName: "";ValueData: """{app}\Vocup.exe"" ""%1"""   ; Flags: uninsdeletekey    deletevalue            ;Check: check_dont_install
;Beschreibung der Aktion festlegen
Root: HKCR; Subkey: "vhf.File\shell\open"; ValueType: string; ValueName: ""; ValueData: "Mit Vocup öffnen"   ; Flags: uninsdeletekey   deletevalue                              ;Check: check_dont_install

;Mit dieser Anweisung wird ein Registryschlüssel namens ".vdp" erzeugt
Root: HKCR; Subkey: ".vdp"; ValueType: string; ValueName: ""; ValueData: "vdp.File"; Flags: uninsdeletekey     deletevalue                                                           ;Check: check_dont_install
;TYpenSchlüssel erstellen
Root: HKCR; Subkey: "vdp.File"; ValueType: string; ValueName: ""; ValueData: "Vocup Datensicherung"   ; Flags: uninsdeletekey    deletevalue                                                  ;Check: check_dont_install
;Icon Zuordnen
Root: HKCR; Subkey: "vdp.File\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\icon_vdp.ico"  ; Flags: uninsdeletekey   deletevalue                                     ;Check: check_dont_install
;Aktion beim Klicken festlegen
Root: HKCR; Subkey: "vdp.File\shell\open\command"; ValueType: string; ValueName: "";ValueData: """{app}\Vocup.exe"" ""%1"""   ; Flags: uninsdeletekey    deletevalue            ;Check: check_dont_install
;Beschreibung der Aktion festlegen
Root: HKCR; Subkey: "vdp.File\shell\open"; ValueType: string; ValueName: ""; ValueData: "Mit Vocup öffnen"   ; Flags: uninsdeletekey   deletevalue

[Run]

Filename: {tmp}\InstMsiA.exe; StatusMsg: Bitte warten Sie, bis die Installation vom Windows Installer abgeschlossen ist.; Parameters: /Q; Flags: waituntilterminated skipifdoesntexist

Filename: {tmp}\WinInstaller.exe; StatusMsg: Bitte warten Sie, bis die Installation vom Windows Installer abgeschlossen ist.; Parameters: /quiet /norestart; Flags: waituntilterminated skipifdoesntexist


Filename: {tmp}\dotnetfx.exe; StatusMsg: Bitte warten Sie, bis die Installation vom .net Framework abgeschlossen ist.; Parameters: "/q:a /c:""install.exe /q"""; Flags: waituntilterminated skipifdoesntexist

Filename: {tmp}\dotnetfx64.exe; StatusMsg: Bitte warten Sie, bis die Installation vom .net Framework abgeschlossen ist.; Parameters: /Q; Flags: waituntilterminated skipifdoesntexist



Filename: {app}\Vocup.exe; Description: {cm:LaunchProgram,Vocup}; Flags: nowait postinstall skipifsilent  ; Check: check_dont_install

[CustomMessages]

WindowsInstaller_Caption=Fehlende Komponente
WindowsInstaller_Description=Es müssen fehlende Komponenten installiert werden.

WindowsInstaller_Label1_Caption0=Das Programm benötigt den WindowsInstaller und das .net Framework 2.0.
WindowsInstaller_Label1_Caption1=
WindowsInstaller_Label1_Caption2=Klicken Sie auf Weiter um die fehlenden Komponenten herunterzuladen und
WindowsInstaller_Label1_Caption3=zu installieren. Stellen Sie sicher, dass die Setup-Datei auf Ihrem Computer
WindowsInstaller_Label1_Caption4=gespeichert ist.
WindowsInstaller_Label1_Caption5=Nach der Installation ist ein Neustart erforderlich. Bitte schliessen Sie alle
WindowsInstaller_Label1_Caption6=geöffneten Programme.
WindowsInstaller_Label1_Caption7=
WindowsInstaller_Label1_Caption8=Nach dem Neustart wird die Installation des .net Framework 2.0
WindowsInstaller_Label1_Caption9=automatisch fortgesetzt.
WindowsInstaller_Label1_Caption10=
WindowsInstaller_Label1_Caption11=Falls Sie die Komponenten manuell installieren möchten, klicken Sie auf Abbrechen.
WindowsInstaller_Label1_ShowHint0=False


framework_Caption=Fehlende Komponente
framework_Description=Es müssen fehlende Komponenten installiert werden.

framework_Label2_Caption0=Das Programm benötigt das .net Framework 2.0.
framework_Label2_Caption1=
framework_Label2_Caption2=
framework_Label2_Caption3=
framework_Label2_Caption4=Klicken Sie auf Weiter um die fehlende Komponente herunterzuladen und
framework_Label2_Caption5=zu installieren.
framework_Label2_Caption6=
framework_Label2_Caption7=Falls Sie die Komponenten manuell installieren möchten, klicken Sie auf Abbrechen.


[Code]



// Abfrage ob WindowsInstaller 3.1 / 2 installiert
procedure DecodeVersion(const Version: cardinal; var a, b : word);
  begin  a := word(Version shr 16);
         b := word(Version and not $ffff0000);
  end;
  function IsMsiAvailable(HV:Integer): boolean;
  var  Version,  dummy     : cardinal;
  MsiHiVer,  MsiLoVer  : word;
    begin
      Result:=(FileExists(ExpandConstant('{sys}\msi.dll'))) and
      (GetVersionNumbers(ExpandConstant('{sys}\msi.dll'), Version, dummy));
      DecodeVersion(Version, MsiHiVer, MsiLoVer);
      Result:= (Result) and (MsiHiVer >= HV);
    end;



 var

    NetFrameWorkInstalled : Boolean;
    WinInstallerInstalled : Boolean;
    Version: TWindowsVersion;
    two_or_three : Boolean;

    Label1: TLabel;
    CheckBox: TCheckBox;
    
    Label2: TLabel;

    BitmapImage1: TBitmapImage;
    Label3: TLabel;



    function InitializeSetup(): Boolean;

 begin



//Überprüfen, ob das .net Framework ab version 2.0 Installiert ist

	NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Microsoft\NET Framework Setup\NDP\v2.0.50727');
	if NetFrameWorkInstalled =true then
	begin
		Result := true;
	end;

	if NetFrameWorkInstalled = false then
	begin
		NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Wow6432Node\Microsoft\NET Framework Setup\NDP\v2.0.50727');
		if NetFrameWorkInstalled =true then
		begin
			Result := true;
		end
     end;
	if NetFrameWorkInstalled = false then
	begin
		NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\Setup');
		if NetFrameWorkInstalled =true then
		begin
			Result := true;
		end
		end;
	if NetFrameWorkInstalled = false then
  begin
    NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Wow6432Node\Microsoft\NET Framework Setup\NDP\v3.0\Setup');
      if NetFrameWorkInstalled = true then
      begin
      Result := true;
  end
  end;

    if NetFrameWorkInstalled = false then

   begin
		NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5\Setup');
		if NetFrameWorkInstalled =true then
		begin
			Result := true;
		end
		end;
	if NetFrameWorkInstalled = false then
  begin
    NetFrameWorkInstalled := RegKeyExists(HKLM,'SOFTWARE\Wow6432Node\Microsoft\NET Framework Setup\NDP\v3.5\Setup');

      if NetFrameWorkInstalled = true then
      begin
      Result := true;
  end
  end;

    if NetFrameWorkInstalled = false then
    begin
    Result:= true;
  end;


  //Überprüfen, ob der Windows Installer installiert ist
   begin
  GetWindowsVersionEx(Version);

  //Windows 98
  if  (Version.Major = 4) and
      (Version.Minor = 10) then
        begin

        if IsMsiAvailable(2)   = true then
            begin
            WinInstallerInstalled := true;
            end
        else
            begin
            WinInstallerInstalled := false;
            end
            two_or_three := false;
        end
  //Windows ME
  else if (Version.Major = 4) and
          (Version.Minor = 90) then
        begin

        if IsMsiAvailable(2)   = true then
            begin
            WinInstallerInstalled := true;
            end
        else
            begin
            WinInstallerInstalled := false;
            end

        two_or_three := false;
        end
  //Windows 2000/XP/Server 2003

   else if (Version.Major = 5) then

     begin

     if IsMsiAvailable(3)   = true then
        begin
          WinInstallerInstalled := true;

          end

         two_or_three := true;
        end

//Windows Vista

   else if (Version.Major = 6) then

     begin
          WinInstallerInstalled := true;

     end

  end;
  end;









    { WindowsInstaller_Activate }

procedure WindowsInstaller_Activate(Page: TWizardPage);
begin
  // enter code here...
end;

{ WindowsInstaller_ShouldSkipPage }

function WindowsInstaller_ShouldSkipPage(Page: TWizardPage): Boolean;
begin
  Result := False;
end;

{ WindowsInstaller_BackButtonClick }

function WindowsInstaller_BackButtonClick(Page: TWizardPage): Boolean;
begin
  Result := True;
end;

{ WindowsInstaller_NextkButtonClick }

function WindowsInstaller_NextButtonClick(Page: TWizardPage): Boolean;
begin

   itd_init;

   if two_or_three = false then

  begin

      //Windows Installer 2.0
      ITD_AddFile('http://download.microsoft.com/download/WindowsInstaller/Install/2.0/W9XMe/EN-US/InstMsiA.exe',expandconstant('{tmp}\InstMsiA.exe'))

      end

  else


      begin
      //Windows Installer 3.1
      ITD_AddFile('http://download.microsoft.com/download/1/4/7/147ded26-931c-4daf-9095-ec7baf996f46/WindowsInstaller-KB893803-v2-x86.exe' ,expandconstant('{tmp}\WinInstaller.exe'));


  end

  ITD_DownloadAfter(Page.ID);

    
  Result := true;
end;


 
{ WindowsInstaller_CancelButtonClick }

procedure WindowsInstaller_CancelButtonClick(Page: TWizardPage; var Cancel, Confirm: Boolean);
begin
  // enter code here...
end;

{ WindowsInstaller_CreatePage }

function WindowsInstaller_CreatePage(PreviousPageId: Integer): Integer;
var
  Page: TWizardPage;
begin
    Page := CreateCustomPage(
    PreviousPageId,
    ExpandConstant('{cm:WindowsInstaller_Caption}'),
    ExpandConstant('{cm:WindowsInstaller_Description}')

  );

// Label1
  Label1 := TLabel.Create(Page);
  with Label1 do
  begin
    Parent := Page.Surface;
    Caption :=
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption0}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption1}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption2}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption3}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption4}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption5}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption6}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption7}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption8}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption9}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption10}') + #13 +
      ExpandConstant('{cm:WindowsInstaller_Label1_Caption11}');
    Left := ScaleX(0);
    Top := ScaleY(0);
    Width := ScaleX(392);
    Height := ScaleY(156);

  end;



  with Page do
  begin
    OnActivate := @WindowsInstaller_Activate;
    OnShouldSkipPage := @WindowsInstaller_ShouldSkipPage;
    OnBackButtonClick := @WindowsInstaller_BackButtonClick;
    OnNextButtonClick := @WindowsInstaller_NextButtonClick;
    OnCancelButtonClick := @WindowsInstaller_CancelButtonClick;
  end;

  Result := Page.ID;
end;


 { framework_Activate }

procedure framework_Activate(Page: TWizardPage);
begin
  // enter code here...
end;

{ framework_ShouldSkipPage }

function framework_ShouldSkipPage(Page: TWizardPage): Boolean;
begin
  Result := False;
end;

{ framework_BackButtonClick }

function framework_BackButtonClick(Page: TWizardPage): Boolean;
begin
  Result := True;
end;

{ framework_NextkButtonClick }

function framework_NextButtonClick(Page: TWizardPage): Boolean;
begin

if IsWin64 = false then

      begin
        itd_addfile('http://download.microsoft.com/download/5/6/7/567758a3-759e-473e-bf8f-52154438565a/dotnetfx.exe' ,expandconstant('{tmp}\dotnetfx.exe'));
      end;

    if    IsWin64 = true then
      begin
        itd_addfile('http://download.microsoft.com/download/a/3/f/a3f1bf98-18f3-4036-9b68-8e6de530ce0a/NetFx64.exe' ,expandconstant('{tmp}\dotnetfx64.exe'));
      end;

   itd_downloadafter(Page.ID);
  Result := True;
end;

{ framework_CancelButtonClick }

procedure framework_CancelButtonClick(Page: TWizardPage; var Cancel, Confirm: Boolean);
begin
  // enter code here...
end;

{ framework_CreatePage }

function framework_CreatePage(PreviousPageId: Integer): Integer;
var
  Page: TWizardPage;
begin
  Page := CreateCustomPage(
    PreviousPageId,
    ExpandConstant('{cm:framework_Caption}'),
    ExpandConstant('{cm:framework_Description}')
  );

// Label2
  Label2 := TLabel.Create(Page);
  with Label2 do
  begin
    Parent := Page.Surface;
    Caption :=
      ExpandConstant('{cm:framework_Label2_Caption0}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption1}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption2}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption3}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption4}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption5}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption6}') + #13 +
      ExpandConstant('{cm:framework_Label2_Caption7}');
    Left := ScaleX(0);
    Top := ScaleY(0);
    Width := ScaleX(394);
    Height := ScaleY(104);
  end;

  with Page do
  begin
    OnActivate := @framework_Activate;
    OnShouldSkipPage := @framework_ShouldSkipPage;
    OnBackButtonClick := @framework_BackButtonClick;
    OnNextButtonClick := @framework_NextButtonClick;
    OnCancelButtonClick := @framework_CancelButtonClick;
  end;

  Result := Page.ID;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
   begin
  if   NetFrameWorkInstalled = false then

  begin
  if WinInstallerInstalled = false then
  
   begin
      if PageID = wpLicense then
      Result := true
      else if PageID = wpInfoBefore then
      Result := true
      else if PageID = wpUserInfo then
      Result := true
      else if PageID = wpSelectDir then
      Result := true
      else if PageID = wpSelectComponents then
      Result := true
      else if PageID = wpSelectProgramGroup then
      Result := true
      else if PageID = wpSelectTasks then
      Result := true
      else if PageID = wpReady then
      Result := true
      else if PageID = wpInfoAfter then
      Result := true
      else if PageID = wpFinished then
      begin

      RegWriteStringValue(HKEY_LOCAL_MACHINE,'SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce', 'Vocup', ExpandConstant('"{srcexe}"'));
      Result := false
      end
      else
      Result := false
      end
      end


      end;
      
  function NeedRestart(): Boolean;
  
  begin
  if   NetFrameWorkInstalled = false then

  begin
  if  WinInstallerInstalled = false then


  Result := true

 if WinInstallerInstalled = true then
 
  Result := false
  end
  if NetFrameWorkInstalled = true then

  Result := false
  
  end;


  //Falls WinInstaller installiert wird
  function check_dont_install(): Boolean;
  
   begin
  if   NetFrameWorkInstalled = false then

  begin
  if  WinInstallerInstalled = false then


  Result := false

  if WinInstallerInstalled = true then
  
  Result := true
  end
  if NetFrameWorkInstalled = true then
  Result := true

  end;
  

procedure InitializeWizard();


begin

 itd_init;

  if NetFrameWorkInstalled = false then
 begin

  if WinInstallerInstalled = false then
  begin
   { WindowsInstaller_InitializeWizard }

  WindowsInstaller_CreatePage(wpWelcome);


end

   else

   begin
     framework_CreatePage(wpWelcome);
    end;
   end;
   end;
